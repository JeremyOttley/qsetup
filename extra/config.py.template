# 
# 
#    ______  ___________  __    ___       _______  
#   /    " \("     _   ")|" \  |"  |     /"     "| 
#  // ____  \)__/  \\__/ ||  | ||  |    (: ______) 
# /  /    )  )  \\_ /    |:  | |:  |     \/    |   
#(: (____/ //   |.  |    |.  |  \  |___  // ___)_  
# \         \   \:  |    /\  |\( \_|:  \(:      "| 
#  \"____/\__\   \__|   (__\_|_)\_______)\_______) 
#                                                  





from libqtile.config import Key, Screen, Group, Drag, Click
from libqtile.command import lazy
from libqtile import layout, bar, widget

from typing import List
import subprocess

# Startup Scripts
def execute_once(process):
    return subprocess.Popen(process.split())

@hook.subscribe.startup
def startup():
    execute_once('feh --bg-scale /home/jottley/.kde.png')
    #execute_once('/usr/bin/nm-applet')
    #execute_once('/usr/bin/blueman-applet')
    #execute_once('/usr/bin/dunst')

mod = "mod4"

keys = [
    # Switch between windows in current stack pane
    Key([mod], "k", lazy.layout.down()),
    Key([mod], "j", lazy.layout.up()),

    # Move windows up or down in current stack
    Key([mod, "control"], "k", lazy.layout.shuffle_down()),
    Key([mod, "control"], "j", lazy.layout.shuffle_up()),

    # Switch window focus to other pane(s) of stack
    Key([mod], "space", lazy.layout.next()),

    # Swap panes of split stack
    Key([mod, "shift"], "space", lazy.layout.rotate()),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([mod, "shift"], "Return", lazy.layout.toggle_split()),
    Key([mod], "Return", lazy.spawn("konsole")),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout()),
    Key([mod], "w", lazy.window.kill()),

    Key([mod, "control"], "r", lazy.restart()),
    Key([mod, "control"], "q", lazy.shutdown()),
    Key([mod], "r", lazy.spawncmd()),

    Key([], "Print", lazy.spawn("scrot '/home/jv/Bilder/Screenshot_%Y%m%d-%H%M%S.png'")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("amixer -q set 'Master' 10%-")),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("amixer -q set 'Master' 10%+")),
    Key([], "XF86AudioMute", lazy.spawn("amixer -q set 'Master' toggle")),
    Key([], "XF86MonBrightnessUp", lazy.spawn("xbacklight -inc 10%")),
    Key([], "XF86MonBrightnessDown", lazy.spawn("xbacklight -dec 10%")),
]

groups = [Group(i) for i in "asdfuiop"]

for i in groups:
    keys.extend([
        # mod1 + letter of group = switch to group
        Key([mod], i.name, lazy.group[i.name].toscreen()),

        # mod1 + shift + letter of group = switch to & move focused window to group
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
    ])

layouts = [
    layout.Stack(num_stacks=1, border_width=0, margin=10),
    layout.Stack(num_stacks=2, border_width=3, margin=10)
]

widget_defaults = dict(
    font='DejaVuSansMonoForPowerline Nerd Font',
    fontsize=12,
    padding=3,
)
default_configuration1 = dict(
    fontsize=12,
    foreground="FFFFFF",
    background=["33393B", "232729"],
    font="ttf-droid",
    margin_y=2,
    font_shadow="000000",
)
default_configuration2 = dict(
    fontsize=12,
    foreground="FFFFFF",
    background=["232729", "292A2A"],
    font="ttf-droid",
    margin_y=2,
    font_shadow="000000",
)
group_configuration = dict(
    active="FFFFFF",
    inactive="4E5455",
    fontsize=12,
    background=["33393B", "232729"],
    font="ttf-droid",
    margin_y=2,
    font_shadow="000000")

extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.TextBox(text="◤ ", fontsize=60, padding=-5, foreground=["232729", "292A2A"], background=["33393B", "232729"]),
                widget.GroupBox(**group_configuration),
                widget.TextBox(text="◤ ", fontsize=60, padding=-5, foreground=["33393B", "232729"], background=["232729", "292A2A"]),
                widget.WindowName(**default_configuration2),
                widget.TextBox(text="◤ ", fontsize=60, padding=-5, foreground=["232729", "292A2A"], background=["33393B", "232729"]),
                widget.TextBox(text="CPU", **default_configuration1),
                widget.CPUGraph(core="all", frequency=5, line_width=2, border_width=1, background=["33393B", "232729"]),
                widget.TextBox(text="  MEM", **default_configuration1),
                widget.Memory(fmt="{MemUsed}M", update_interval=10, background=["33393B", "232729"]),
                widget.TextBox(text="  BAT", **default_configuration1),
                widget.Battery(battery_name="BAT0", charge_char="▲", discharge_char="▼", format="{percent:2.0%} {char}", background=["33393B", "232729"]),
                widget.TextBox(text="  VOL", **default_configuration1),
                widget.Volume(channel="Master", background=["33393B", "232729"]),
                widget.Systray(**default_configuration1),
                widget.TextBox(text=" ", **default_configuration1),
                widget.TextBox(text="◤ ", fontsize=60, padding=-5, foreground=["33393B", "232729"], background=["232729", "292A2A"]),
                widget.Clock(**default_configuration2, format='%H:%M - %a,%d.%m.%Y'),
                widget.TextBox(text="◤ ", fontsize=60, padding=-5, foreground=["232729", "292A2A"], background=["33393B", "232729"]),
            ],
            22,
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    {'wmclass': 'confirm'},
    {'wmclass': 'dialog'},
    {'wmclass': 'download'},
    {'wmclass': 'error'},
    {'wmclass': 'file_progress'},
    {'wmclass': 'notification'},
    {'wmclass': 'splash'},
    {'wmclass': 'toolbar'},
    {'wmclass': 'confirmreset'},  # gitk
    {'wmclass': 'makebranch'},  # gitk
    {'wmclass': 'maketag'},  # gitk
    {'wname': 'branchdialog'},  # gitk
    {'wname': 'pinentry'},  # GPG key password entry
    {'wmclass': 'ssh-askpass'},  # ssh-askpass
])
auto_fullscreen = True
focus_on_window_activation = "smart"

wmname = "Qtile"
